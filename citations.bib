@inproceedings{10.1145/3240765.3240842,
author = {Laeufer, Kevin and Koenig, Jack and Kim, Donggyu and Bachrach, Jonathan and Sen, Koushik},
title = {RFUZZ: Coverage-Directed Fuzz Testing of RTL on FPGAs},
year = {2018},
publisher = {IEEE Press},
url = {https://doi.org/10.1145/3240765.3240842},
doi = {10.1145/3240765.3240842},
abstract = {Dynamic verification is widely used to increase confidence in the correctness of RTL circuits during the pre-silicon design phase. Despite numerous attempts over the last decades to automate the stimuli generation based on coverage feedback, Coverage Directed Test Generation (CDG) has not found the widespread adoption that one would expect. Based on new ideas from the software testing community around coverage-guided mutational fuzz testing, we propose a new approach to the CDG problem which requires minimal setup and takes advantage of FPGA-accelerated simulation for rapid testing. We provide test input and coverage definitions that allow fuzz testing to be applied to RTL circuit verification. In addition we propose and implement a series of transformation passes that make it feasible to reset arbitrary RTL designs quickly, a requirement for deterministic test execution. Alongside this paper we provide rfuzz, a fully featured implementation of our testing methodology which we make available as open-source software to the research community. An empirical evaluation of RFUZZ shows promising results on archiving coverage for a wide range of different RTL designs ranging from communication IPs to an industry scale 64-bit CPU.},
booktitle = {2018 IEEE/ACM International Conference on Computer-Aided Design (ICCAD)},
pages = {1–8},
numpages = {8},
location = {San Diego, CA, USA}
}
@INPROCEEDINGS{1219010,
  author={Fine, S. and Ziv, A.},
  booktitle={Proceedings 2003. Design Automation Conference (IEEE Cat. No.03CH37451)}, 
  title={Coverage directed test generation for functional verification using Bayesian networks}, 
  year={2003},
  volume={},
  number={},
  pages={286-291},
  doi={10.1145/775832.775907}}
@INPROCEEDINGS{8203780,
  author={Izraelevitz, Adam and Koenig, Jack and Li, Patrick and Lin, Richard and Wang, Angie and Magyar, Albert and Kim, Donggyu and Schmidt, Colin and Markley, Chick and Lawson, Jim and Bachrach, Jonathan},
  booktitle={2017 IEEE/ACM International Conference on Computer-Aided Design (ICCAD)}, 
  title={Reusability is FIRRTL ground: Hardware construction languages, compiler frameworks, and transformations}, 
  year={2017},
  volume={},
  number={},
  pages={209-216},
  doi={10.1109/ICCAD.2017.8203780}}
@INPROCEEDINGS{8354596,
  author={Bose, Chandrima and Pal, Rijubrata and Mandai, Mrinal Kanti},
  booktitle={2018 3rd International Conference on Microwave and Photonics (ICMAP)}, 
  title={Design of a wideband down-conversion mixer in X-band}, 
  year={2018},
  volume={},
  number={},
  pages={1-2},
  doi={10.1109/ICMAP.2018.8354596}}
@inproceedings{10.1145/3387902.3392633,
author = {Liu, Frank and Miniskar, Narasinga Rao and Chakraborty, Dwaipayan and Vetter, Jeffrey S.},
title = {Deffe: A Data-Efficient Framework for Performance Characterization in Domain-Specific Computing},
year = {2020},
isbn = {9781450379564},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3387902.3392633},
doi = {10.1145/3387902.3392633},
abstract = {As the computer architecture community moves toward the end of traditional device scaling, domain-specific architectures are becoming more pervasive. Given the number of diverse workloads and emerging heterogeneous architectures, exploration of this design space is a constrained optimization problem in a high-dimensional parameter space. In this respect, predicting workload performance both accurately and efficiently is a critical task for this exploration. In this paper, we present Deffe: a framework to estimate workload performance across varying architectural configurations. Deffe uses machine learning to improve the performance of this design space exploration. By casting the work of performance prediction itself as transfer learning tasks, the modelling component of Deffe can leverage the learned knowledge on one workload and "transfer" it to a new workload. Our extensive experimental results on a contemporary architecture toolchain (RISC-V and GEM5) and infrastructure show that the method can achieve superior testing accuracy with an effective reduction of 32-80\texttimes{} in terms of the amount of required training data. The overall run-time can be reduced from 400 hours to 5 hours when executed over 24 CPU cores. The infrastructure component of Deffe is based on scalable and easy-to-use open-source software components.},
booktitle = {Proceedings of the 17th ACM International Conference on Computing Frontiers},
pages = {182–191},
numpages = {10},
keywords = {workload characterization, multichannel convolution, RISC-V, transfer learning, machine learning},
location = {Catania, Sicily, Italy},
series = {CF '20}
}
@article{10.1007/s10710-005-2985-x,
author = {Squillero, Giovanni},
title = {MicroGP—An Evolutionary Assembly Program Generator},
year = {2005},
issue_date = {September 2005},
publisher = {Kluwer Academic Publishers},
address = {USA},
volume = {6},
number = {3},
issn = {1389-2576},
url = {https://doi.org/10.1007/s10710-005-2985-x},
doi = {10.1007/s10710-005-2985-x},
abstract = {This paper describes GP, an evolutionary approach for generating assembly programs tuned for a specific microprocessor. The approach is based on three clearly separated blocks: an evolutionary core, an instruction library and an external evaluator. The evolutionary core conducts adaptive population-based search. The instruction library is used to map individuals to valid assembly language programs. The external evaluator simulates the assembly program, providing the necessary feedback to the evolutionary core. GP has some distinctive features that allow its use in specific contexts. This paper focuses on one such context: test program generation for design validation of microprocessors. Reported results show GP being used to validate a complex 5-stage pipelined microprocessor. Its induced test programs outperform an exhaustive functional test and an instruction randomizer, showing that engineers are able to automatically obtain high-quality test programs.},
journal = {Genetic Programming and Evolvable Machines},
month = {sep},
pages = {247–263},
numpages = {17},
keywords = {micro-processors, evolutionary algorithms, assembly programs generation}
}